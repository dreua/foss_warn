def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty("flutter.sdk")
if (flutterRoot == null) {
    throw new FileNotFoundException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("key.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "de.nucleus.foss_warn"
    compileSdk 33

    compileOptions {
        // for flutter_local_notification: Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        // set Java compatibility to Java 17
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlin {
        jvmToolchain(17)
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
    }

    defaultConfig {
        applicationId "de.nucleus.foss_warn"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true // for flutter_local_notification plugin
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties["keyAlias"]
            keyPassword keystoreProperties["keyPassword"]
            storeFile keystoreProperties["storeFile"] ? file(keystoreProperties["storeFile"]) : null
            storePassword keystoreProperties["storePassword"]
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
        }

        release {
            if(keystorePropertiesFile.exists()) {
                project.logger.quiet("Using ${keystorePropertiesFile.path} to sign the app in release mode.")
                signingConfig signingConfigs.release
            } else {
                project.logger.quiet("Using a debug key to sign the app in release mode.")
                signingConfig signingConfigs.debug
            }
            minifyEnabled true
            shrinkResources true
            proguardFiles(
                    getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
            )
        }
    }
}

flutter {
    source "../.."
}

dependencies {
    // for flutter_local_notification: to prevent the app from crashing on Android 12L and higher
    implementation "androidx.window:window:1.0.0"
    // For Java-friendly APIs to register and unregister callbacks
    implementation "androidx.window:window-java:1.0.0"
    // For RxJava2 integration
    implementation "androidx.window:window-rxjava2:1.0.0"
    // For RxJava3 integration
    implementation "androidx.window:window-rxjava3:1.0.0"
    // For testing
    implementation "androidx.window:window-testing:1.0.0"
    // for flutter_local_notification plugin
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.2.2'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}
